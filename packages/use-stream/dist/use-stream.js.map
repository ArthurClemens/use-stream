{"version":3,"file":"use-stream.js","sources":["../src/index.ts"],"sourcesContent":["import type Debug from 'debug';\n// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\n\ntype DependencyList = ReadonlyArray<unknown>;\n\ntype TStream<T> = {\n  (): T;\n  (value: T): unknown;\n  map<U>(f: (current: T) => U): TStream<U>;\n  end: TStream<boolean>;\n} & unknown;\n\ninterface IModel {\n  [key: string]: TStream<unknown>;\n}\n\ntype TMaybeDeferredModel<TModel> = TModel & {\n  isDeferred?: boolean;\n};\n\ntype TModelFn<TModel> = (_?: unknown) => TMaybeDeferredModel<TModel>;\n\ntype TModelGen<TModel> = TModel | TModelFn<TModel>;\n\ntype Props<TModel> = {\n  /**\n   * The model is a POJO object with (optionally multiple) streams.\n   * `useStream` returns this model once it is initialized.\n   *\n   * Example:\n   *\n   * const model = useStream({\n   *   model: {\n   *     index: stream(0),\n   *     count: stream(3)\n   *   }\n   * })\n   *\n   * const { index, count } = model\n   *\n   *\n   * For more flexibility, pass a function that returns the model object. See also `defer`\n   * how to combine this for optimization.\n   *\n   * Example:\n   *\n   * const { index, count } = useStream({\n   *   model: () => {\n   *     const index = stream(0)\n   *     const count = stream(3)\n   *     count.map(console.log) // another stream that is subscribed to the count stream\n   *\n   *     return {\n   *       index,\n   *       count\n   *     }\n   *   }\n   * })\n   */\n  model: TModelGen<TModel>;\n\n  /**\n   * Callback method to run side effects when the containing component is mounted.\n   */\n  onMount?: (model: TModel) => unknown;\n\n  /**\n   * Callback method to run side effects when the containing component is updated through deps.\n   */\n  onUpdate?: (model: TModel) => unknown;\n\n  /**\n   * Callback method to clean up side effects. onDestroy is called\n   * when the containing component goes out of scope.\n   */\n  onDestroy?: (model: TModel | null) => unknown;\n\n  /**\n   * React hooks deps array. Default [].\n   */\n  deps?: DependencyList;\n\n  /**\n   * Defers initialization of the model to the mount useEffect.\n   */\n  defer?: boolean;\n\n  /**\n   * Debugger instance.\n   * See: https://www.npmjs.com/package/debug\n   */\n  debug?: Debug.Debugger;\n};\n\nexport const useStream = <TModel>({\n  model,\n  onMount,\n  onDestroy,\n  onUpdate,\n  deps = [],\n  defer,\n  debug,\n}: Props<TModel>) => {\n  // Local storage that connects stream updates to React renders:\n  const [streamValues, setStreamValues] = React.useState<{\n    [key: string]: unknown;\n  }>({});\n\n  // Distinguish update from mount:\n  const isInitedRef = React.useRef(false);\n\n  // Keep reference of all streams that update streamValues so they can be stopped:\n  type TSubsRef = TStream<unknown>[];\n  const subsRef: React.MutableRefObject<TSubsRef> = React.useRef<TSubsRef>([]);\n\n  const subscribe = (memo: TMaybeDeferredModel<TModel>) => {\n    if (debug) {\n      debug('Subscribe');\n    }\n    subsRef.current = Object.keys(memo)\n      .map((key: string) => {\n        const stream: TStream<unknown> = (memo as TMaybeDeferredModel<TModel> &\n          IModel)[key];\n        if (stream.map && typeof stream.map === 'function') {\n          return stream.map((value: unknown) => {\n            if (debug) {\n              debug('Will update %s', key);\n            }\n            setStreamValues({\n              ...streamValues,\n              [key]: value,\n            });\n            return null;\n          });\n        }\n        return false;\n      })\n      .filter(Boolean) as TSubsRef;\n  };\n\n  const unsubscribe = () => {\n    if (subsRef.current.length) {\n      if (debug) {\n        debug('Unsubscribe');\n      }\n      subsRef.current.forEach((s: TStream<unknown>) => s.end(true));\n      subsRef.current = [];\n    }\n  };\n\n  const createMemo: () => TMaybeDeferredModel<TModel> = () => {\n    if (debug) {\n      debug('createMemo');\n    }\n    unsubscribe();\n    const modelFn: TModelFn<TModel & IModel> =\n      typeof model === 'function'\n        ? (model as TModelFn<TModel & IModel>)\n        : ((() => model) as TModelFn<TModel & IModel>);\n    const memo = modelFn();\n    subscribe(memo);\n    return memo;\n  };\n\n  const [memo, setMemo] = React.useState<TMaybeDeferredModel<TModel>>(\n    defer\n      ? ({ ...model, isDeferred: true } as TMaybeDeferredModel<TModel>)\n      : createMemo,\n  );\n\n  // Update\n  React.useEffect(() => {\n    if (!isInitedRef.current) {\n      return;\n    }\n    if (debug) {\n      debug('Updating');\n    }\n    if (onUpdate) {\n      const localMemo = createMemo();\n      setMemo(localMemo);\n      onUpdate(localMemo);\n    }\n  }, deps); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Mount and unmount\n  React.useEffect(() => {\n    if (debug) {\n      debug('Mounting');\n    }\n\n    let localMemo = memo;\n    if (defer) {\n      localMemo = createMemo();\n      setMemo(localMemo);\n    }\n    if (onMount && localMemo) {\n      onMount(localMemo);\n    }\n    isInitedRef.current = true;\n\n    return () => {\n      if (debug) {\n        debug('Unmounting');\n      }\n      unsubscribe();\n      if (onDestroy) {\n        onDestroy(memo);\n      }\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return memo;\n};\n"],"names":["model","onMount","onDestroy","onUpdate","deps","defer","debug","streamValues","setStreamValues","React","useState","isInitedRef","useRef","subsRef","unsubscribe","current","length","forEach","s","end","createMemo","memo","Object","keys","map","key","stream","value","[object Object]","filter","Boolean","subscribe","setMemo","isDeferred","useEffect","localMemo"],"mappings":"mXA+FyB,EACvBA,MAAAA,EACAC,QAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,KAAAA,EAAO,GACPC,MAAAA,EACAC,MAAAA,MAGA,MAAOC,EAAcC,GAAmBC,UAAMC,SAE3C,IAGGC,EAAcF,UAAMG,QAAO,GAI3BC,EAA4CJ,UAAMG,OAAiB,IA2BnEE,EAAc,KACdD,EAAQE,QAAQC,SACdV,GACFA,EAAM,eAERO,EAAQE,QAAQE,QAASC,GAAwBA,EAAEC,KAAI,IACvDN,EAAQE,QAAU,KAIhBK,EAAgD,KAChDd,GACFA,EAAM,cAERQ,IACA,MAIMO,GAHa,mBAAVrB,EACFA,MACOA,KAGd,MA9CgB,CAACqB,IACbf,GACFA,EAAM,aAERO,EAAQE,QAAUO,OAAOC,KAAKF,GAC3BG,IAAKC,IACJ,MAAMC,EAA4BL,EACxBI,GACV,SAAIC,EAAOF,KAA6B,mBAAfE,EAAOF,MACvBE,EAAOF,IAAKG,IACbrB,GACFA,EAAM,iBAAkBmB,GAE1BjB,iCACKD,IACHqB,CAACH,GAAME,KAEF,SAKZE,OAAOC,UAuBVC,CAAUV,GACHA,IAGFA,EAAMW,GAAWvB,UAAMC,SAC5BL,EACKiB,+BAAKtB,IAAOiC,YAAY,IACzBb,GA6CN,OAzCAX,UAAMyB,UAAU,KACd,GAAKvB,EAAYI,UAGbT,GACFA,EAAM,YAEJH,GAAU,CACZ,MAAMgC,EAAYf,IAClBY,EAAQG,GACRhC,EAASgC,KAEV/B,GAGHK,UAAMyB,UAAU,KACV5B,GACFA,EAAM,YAGR,IAAI6B,EAAYd,EAUhB,OATIhB,IACF8B,EAAYf,IACZY,EAAQG,IAENlC,GAAWkC,GACblC,EAAQkC,GAEVxB,EAAYI,SAAU,EAEf,KACDT,GACFA,EAAM,cAERQ,IACIZ,GACFA,EAAUmB,KAGb,IAEIA"}